#pragma ucpp notice - PreCompile it with UCPP
#pragma ucpp version
#pragma ucpp include ../../UsUnit/macros.inc
class TEST_Algorithms extends TestCase;

#define TEST_PERFORMANCE 1

function run()
{
    local string s1, s2, s3, s4;
    local int i, h1, h2;
    #if TEST_PERFORMANCE
    local float timing;
    #endif
    local HttpUtil.xURL URLstruct;

    // simple hash algorithm testing

    s1 = "http://www.beyondunreal.com";
    s2 = "http://www.elmuerte.com";
    h1 = class'HttpCache'.static.createHash(s1);
    h2 = class'HttpCache'.static.createHash(s2);
    CHECK((s1 != s2) && (h1 != h2), "hash(http://www.beyondunreal.com) != hash(http://www.elmuerte.com)");

    for (i = 0; i < 10; i++)
    {
        s1 = class'HttpSock'.static.randString(16+rand(128));
        s2 = class'HttpSock'.static.randString(16+rand(128));

        #if TEST_PERFORMANCE
        Clock(timing);
        #endif
        h1 = class'HttpCache'.static.createHash(s1);
        #if TEST_PERFORMANCE
        UnClock(timing);
        log("createHash "$string(timing*1000)$"ms "$string(timing*1000/len(s1))$"ms/char");
        #endif
        h2 = class'HttpCache'.static.createHash(s2);


        CHECK((s1 != s2) && (h1 != h2), "s1 != s2 && hash(s1) != hash(s2);");
    }

    // md5 checksum testing

    s1 = "http://www.beyondunreal.com";
    s2 = "http://www.elmuerte.com";
    s3 = class'HttpUtil'.static.MD5String(s1);
    s4 = class'HttpUtil'.static.MD5String(s2);
    CHECK((s1 != s2) && (h1 != h2), "hash(http://www.beyondunreal.com) != hash(http://www.elmuerte.com)");

    CHECK(class'HttpUtil'.static.MD5String("") == "d41d8cd98f00b204e9800998ecf8427e", "md5(\"\") == d41d8cd98f00b204e9800998ecf8427e");
    CHECK(class'HttpUtil'.static.MD5String("testestest") == "01b03dbf1fa5a4c56066f27b0fc95efb", "md5(\"testestest\") == 01b03dbf1fa5a4c56066f27b0fc95efb");

    for (i = 0; i < 10; i++)
    {
        s1 = class'HttpSock'.static.randString(16+rand(128));
        s2 = class'HttpSock'.static.randString(16+rand(128));

        #if TEST_PERFORMANCE
        Clock(timing);
        #endif
        s3 = class'HttpUtil'.static.MD5String(s1);
        #if TEST_PERFORMANCE
        UnClock(timing);
        log("MD5String "$string(timing*1000)$"ms "$string(timing*1000/len(s1))$"ms/char");
        #endif
        s4 = class'HttpUtil'.static.MD5String(s2);


        CHECK((s1 != s2) && (s3 != s4), "s1 != s2 && md5(s1) != md5(s2);");
    }

    // base64 testing


    // URL parsing testing
    CHECK(class'HttpUtil'.static.parseURL("protocol://user%3a%3Aname:p%40ssword@hostname:80/location?query#hash", URLstruct), "Valid URL parsing: protocol://username:password@hostname/location?query#hash");
    CHECK(URLstruct.protocol == "protocol");
    CHECK(URLstruct.username == "user::name");
    CHECK(URLstruct.password == "p@ssword");
    CHECK(URLstruct.hostname == "hostname");
    CHECK(URLstruct.port == 80);
    CHECK(URLstruct.location == "/location");
    CHECK(URLstruct.query == "query");
    CHECK(URLstruct.hash == "hash");
    CHECK(class'HttpUtil'.static.xURLtoLocation(URLstruct) == "/location?query#hash");
    CHECK(class'HttpUtil'.static.xURLtoString(URLstruct, true) == "protocol://user%3A%3Aname:p%40ssword@hostname:80/location?query#hash", class'HttpUtil'.static.xURLtoString(URLstruct, true)$" == protocol://username:password@hostname:80/location?query#hash");
    CHECK(!class'HttpUtil'.static.parseURL("protocol:///location?query#hash", URLstruct), "Invalid URL parsing: protocol:///location?query#hash");
    CHECK(!class'HttpUtil'.static.parseURL("://hostname/location?query#hash", URLstruct), "Invalid URL parsing: ://hostname/location?query#hash");
    CHECK(!class'HttpUtil'.static.parseURL("protocol://", URLstruct), "Invalid URL parsing: protocol://");
    CHECK(class'HttpUtil'.static.getPortByProtocol("HtTp") == 80);
    CHECK(class'HttpUtil'.static.getPortByProtocol("unknown") == 0);

    CHECK(class'HttpUtil'.static.RawUrlDecode("Te%27tg%22%5B%20%26%3A%40") == "Te'tg\"[ &:@", "Te%27tg%22%5B%20%26%3A%40 == Te'tg\"[ &:@");
    Done();
}

defaultproperties
{
    TestName="LibHTTP Algrithm Tests"
    TestDescription="Tests all algorithms defined in the LibHTTP package"
}