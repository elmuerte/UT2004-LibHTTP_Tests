#pragma ucpp notice - PreCompile it with UCPP
#pragma ucpp version
#pragma ucpp include ../../UsUnit/macros.inc
class TEST_BaseRequest extends TestCase abstract config;

/**
 * The base location of the test urls
 */
var globalconfig string TestLocation;

const token = "#LIBHTTP_4C696248545450";

var array<string> URLs;
var array<string> URLdesc;

var HttpSock Sock;

var int idx;

function setUp()
{
    URLdesc.length = URLs.length;
    Sock = spawn(class'HttpSock');
    Sock.iVerbose = class'HttpUtil'.default.LOGDATA;
    Sock.OnComplete = DownloadComplete;
    Sock.OnError = SockError;
    idx = -1;
}

function tearDown()
{
    Sock.Destroy();
    Sock = none;
}

function string getUrl(int i)
{
    return repl(URLS[i], "%TestLocation%", TestLocation);
}

function SockError(HttpSock Sender, string ErrorMessage, optional string Param1, optional string Param2)
{
    CHECK(false, "Socket error for test #"$idx$": "$ErrorMessage$"("$Param1$") ("$Param2$")");
    SetTimer(0.001, false);
}

event Timer()
{
    run();
}

function DownloadComplete(HttpSock Sender)
{
    local FileLog f;
    local int i;
    local bool bFoundToken;

    bFoundToken = false;

    f = spawn(class'FileLog');
    f.OpenLog(string(class)$"-"$idx$"_"$string(Sender.Tag), "html", true);
    f.logf("<!-- ");
    for (i = 0; i < Sender.RequestHistory.length-1; i++)
    {
        f.logf("Hostname:"@Sender.RequestHistory[i].URL.hostname);
        f.logf("Location:"@class'HttpUtil'.static.xURLtoLocation(Sender.RequestHistory[i].URL));
        f.logf("Method:"@Sender.RequestHistory[i].Method);
        f.logf("Response:"@Sender.RequestHistory[i].HTTPresponse);
        f.logf("");
    }
    f.logf("Hostname:"@Sender.CurrentURL.hostname);
    f.logf("Location:"@class'HttpUtil'.static.xURLtoLocation(Sender.CurrentURL));
    f.logf("Method:"@Sender.RequestMethod);
    f.logf("RequestDuration:"@Sender.RequestDuration);
    f.logf("");
    for (i = 0; i < Sender.ReturnHeaders.length; i++)
    {
        f.Logf(Sender.ReturnHeaders[i]);
    }
    f.logf("-->");
    for (i = 0; i < Sender.ReturnData.length; i++)
    {
        if (!bFoundToken)
        {
            bFoundToken = InStr(Sender.ReturnData[i], token) > -1;
        }
        if (len(Sender.ReturnData[i]) > 1024)
        {
            f.Logf(Left(Sender.ReturnData[i], 1024));
            f.Logf(Mid(Sender.ReturnData[i], 1024));
        }
        else f.Logf(Sender.ReturnData[i]);
    }
    f.Destroy();

    CHECK(bFoundToken, "Found LibHTTP token for test #"$idx@URLdesc[idx]);
    SetTimer(0.001, false);
}

defaultproperties
{
    TestName="LibHTTP Request Base"
    TestDescription="DO NOT RUN. Base test case LibHTTP request tests."
}
